[user]
  name = Evan Relf
  useConfigOnly = true
[alias]
  # ADD
  a = add
  aa = "!git add --all $@ && git status --short #"
  ap = add --patch

  # BRANCH
  b = branch --verbose
  bd = branch --delete
  bdf = branch --delete --force
  master-to-main = branch --move --force main

  # CHECKOUT
  co = "!echo \"Prefer using 'switch' and 'restore'\" >&2; exit 1 #"

  # CLEAN
  clean-ignored = clean -Xdf
  clean-untracked = clean -xdi

  # COMMIT
  c = commit -S
  amend = commit --amend --no-edit -S
  rename = "!if [ -z \"$(git status --porcelain)\" ]; then git commit --amend; else echo 'Refusing to rename while dirty' >&2; exit 1; fi #"
  undo-commit = reset --soft HEAD~

  # DIFF
  d = diff
  ds = diff --staged

  # FETCH
  f = fetch
  ff = fetch --force

  # LOG
  l = lll --max-count=10
  ll = lll --max-count=100
  lll = log --graph --pretty=format:'%Cred%h%Creset %s%C(yellow)%d%Creset %Cgreen(%cr)%Creset %Cblue<%an>%Creset'
  signed = log --graph --max-count=10 --pretty=format:'%Cred%h%Creset %s%C(yellow)%d%Creset %Cgreen(%cr)%Creset %Cblue<%an>%Creset %C(magenta)%GS%Creset'

  # LOOKUP (script)
  k = lookup

  # PULL
  pullff = pull --ff-only
  pullrb = pull --rebase

  # PUSH
  p = "!bash $HOME/.config/git/hooks/pre-push && git push $@ #"
  pf = p --force-with-lease

  # REBASE
  rb = rebase
  rbi = "!if [ -z \"$1\" ]; then git rebase-back $(git lookup); else git rebase-back $@; fi #" # script
  undo-rebase = reset --hard ORIG_HEAD
  rbc = rebase --continue
  rbs = rebase --skip
  rba = rebase --abort

  # RESET
  r = reset
  rp = reset --patch
  rs = reset --soft
  rh = reset --hard

  # RESTORE
  re = restore
  rep = restore --patch

  # SHOW
  sh = "!if [ -z \"$1\" ]; then git lookup | xargs git show --name-only; else git show --name-only $@; fi #"
  shd = "!if [ -z \"$1\" ]; then git lookup | xargs git show; else git show $@; fi #"

  # SPARSE-CHECKOUT
  sc = sparse-checkout
  sce = "!file=\"$(git root)/.git/info/sparse-checkout\"; if [ -f \"$file\" ]; then $EDITOR $file; else echo 'Sparse checkout file does not exist' >&2; exit 1; fi #"

  # STASH
  st = stash push
  stu = stash push --include-untracked
  sts = stash show
  sta = stash apply
  stp = stash pop
  stl = stash list
  std = stash drop
  # stdd = stash clear

  # STATUS
  s = status --show-stash

  # SWITCH
  sw = switch
  swc = switch --create

  # TAG
  t = tag
  td = tag --delete

  # WORKTREE
  wt = worktree

  # OTHER
  # Print the path to the root of the git repo
  root = rev-parse --show-toplevel
  # Print the commit hash
  hash = rev-parse --default HEAD
  # Print current branch
  current-branch = "!git symbolic-ref --short HEAD --quiet || git branch | head -n 1 | awk '{print $NF}' | tr -d ')' #"
  # Run a command from the root of the git repo
  exec = "!exec "
  blank = "!if [ -z \"$1\" ]; then exit 1; else git checkout --orphan $1 && git rm --cached -r .; fi #"
[core]
  pager = delta --theme=GitHub --hunk-style=plain --highlight-removed --tabs=8 --file-color=yellow --file-style=box
  excludesfile = ~/.config/git/ignore
[status]
  showUntrackedFiles = all
[stash]
  showPatch = true
  showStat = true
[commit]
  template = ~/.config/git/template
[push]
  default = current
  followTags = true
[diff]
  renames = copies
  algorithm = patience
[diff "nodiff"]
  command = true
[color]
  ui = true
[fetch]
  prune = true
  pruneTags = true
[interactive]
  singleKey = true
[include]
  path = ~/.config/git/local
