aliases.ab = ['abandon']
aliases.b = ['bookmark']
aliases.c = ['commit']
aliases.d = ['diff']
aliases.dt = ['diff', '--tool', 'difft']
aliases.l = ['log', '-r', 'alias_l()']
aliases.ll = ['log', '-r', 'alias_ll()']
aliases.s = ['status']

aliases.blame = ['file', 'annotate']
aliases.fetch = ['git', 'fetch']
aliases.init = ['git', 'init', '--colocate']
aliases.push = ['git', 'push']

aliases.mut = ['--ignore-immutable']
aliases.here = ['bookmark', 'set', '-r', '@-']
aliases.give = ['squash', '--use-destination-message', '--from', '@', '--into']
aliases.take = ['squash', '--use-destination-message', '--into', '@', '--from']

user.name = 'Evan Relf'
user.email = 'evan@evanrelf.com'
core.watchman.register-snapshot-trigger = true
ui.default-command = 'status'
ui.graph.style = 'ascii'
ui.diff.format = 'git'
ui.diff-editor = ':builtin'
ui.pager = 'delta'
merge-tools.delta.diff-expected-exit-codes = [0, 1]
merge-tools.difft.diff-args = ['--color=always', '$left', '$right']
git.auto-local-bookmark = false
git.push-new-bookmarks = true
git.private-commits = 'subject(glob:"private:*") & mine()'
git.write-change-id-header = true
signing.behavior = 'own'
signing.backend = 'ssh'
signing.key = '~/.ssh/jj.pub'

revset-aliases.'alias_l()' = 'latest(::@, 10) | (ancestors(immutable_heads().., 2) & remote_bookmarks().. & mine()) | heads(trunk()) | bookmarks()'
revset-aliases.'alias_ll()' = 'alias_l() | ::@'
revset-aliases.'pr(x)' = '::x ~ ::trunk()' # TODO: Choose a better name

templates.log = 'evan_log_oneline'
template-aliases.'format_short_id(id)' = 'id.shortest(6)'
template-aliases.evan_log_oneline = '''
if(root,
  format_root_commit(self),
  label(if(current_working_copy, "working_copy"),
    concat(
      separate(" ",
        format_short_change_id_with_hidden_and_divergent_info(self),
        format_short_commit_id(commit_id),
        pad_start(3, format_log_timestamp(commit_timestamp(self))),
        if(conflict, label("conflict", "conflict")),
        if(config("ui.show-cryptographic-signatures").as_boolean(),
          format_short_cryptographic_signature(signature)),
        if(description,
          description.first_line(),
          label(if(empty, "empty"), description_placeholder),
        ),
        if(empty, label("empty", "(empty)")),
        bookmarks,
        tags,
        working_copies,
      ) ++ "\n",
    ),
  )
)
'''
template-aliases.'format_log_timestamp(timestamp)' = '''
if(
  timestamp.ago().remove_suffix(" ago").remove_suffix("s").ends_with("second"),
  timestamp.ago().remove_suffix(" ago").remove_suffix("s").remove_suffix(" second") ++ label("timestamp", "s"),
if(
  timestamp.ago().remove_suffix(" ago").remove_suffix("s").ends_with("minute"),
  timestamp.ago().remove_suffix(" ago").remove_suffix("s").remove_suffix(" minute") ++ label("timestamp", "m"),
if(
  timestamp.ago().remove_suffix(" ago").remove_suffix("s").ends_with("hour"),
  timestamp.ago().remove_suffix(" ago").remove_suffix("s").remove_suffix(" hour") ++ label("timestamp", "h"),
if(
  timestamp.ago().remove_suffix(" ago").remove_suffix("s").ends_with("day"),
  timestamp.ago().remove_suffix(" ago").remove_suffix("s").remove_suffix(" day") ++ label("timestamp", "d"),
if(
  timestamp.ago().remove_suffix(" ago").remove_suffix("s").ends_with("week"),
  timestamp.ago().remove_suffix(" ago").remove_suffix("s").remove_suffix(" week") ++ label("timestamp", "wk"),
if(
  timestamp.ago().remove_suffix(" ago").remove_suffix("s").ends_with("month"),
  timestamp.ago().remove_suffix(" ago").remove_suffix("s").remove_suffix(" month") ++ label("timestamp", "mo"),
if(
  timestamp.ago().remove_suffix(" ago").remove_suffix("s").ends_with("year"),
  timestamp.ago().remove_suffix(" ago").remove_suffix("s").remove_suffix(" year") ++ label("timestamp", "yr"),
timestamp.ago().remove_suffix(" ago"),
)))))))
'''

[[--scope]]
--when.repositories = ["~/Code/MercuryTechnologies"]
[--scope.core]
fsmonitor = "watchman"
[--scope.fix.tools.be-format-haskell]
command = ["be", "format", "haskell"]
patterns = ["glob:'**/*.hs'"]
[--scope.fix.tools.be-format-nix]
command = ["be", "format", "nix"]
patterns = ["glob:'**/*.nix'"]
