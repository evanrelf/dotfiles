aliases.clone = ['git', 'clone', '--colocate']
aliases.fetch = ['git', 'fetch']
aliases.here = ['branch', 'set', '-r', 'HEAD@git']
aliases.l = ['log', '-r', 'alias_l()']
aliases.ll = ['log', '-r', 'alias_ll()']
aliases.mutably = ['--config-toml', 'revset-aliases."immutable_heads()" = "none()"']
aliases.push = ['git', 'push', '--dry-run']
aliases.PUSH = ['git', 'push']
user.name = 'Evan Relf'
user.email = 'evan@evanrelf.com'
core.fsmonitor = 'watchman'
ui.graph.style = 'ascii'
ui.diff-editor = ':builtin'
ui.diff.format = 'git'
ui.pager = 'delta'
ui.default-description = "\n"
git.auto-local-branch = false
# Default revset in v0.10.0, made available as an alias
revset-aliases.'default_log()' = '@ | ancestors(immutable_heads().., 2) | heads(immutable_heads())'
revset-aliases.'default_push()' = 'remote_branches(remote=origin)..@'
revset-aliases.'alias_l()' = '(default_log() & remote_branches()..) | latest(::@, 10) | branches()'
revset-aliases.'alias_ll()' = 'alias_l() | ::@'
revset-aliases.'common_ancestor(x, y)' = 'latest(::x & ::y)'
revset-aliases.'first(x, y)' = 'latest(::x & ::y)+ & ::x'
templates.log = 'evan_log_oneline'
template-aliases.'format_short_id(id)' = 'id.shortest(6)'
template-aliases.evan_log_oneline = '''
label(
  if(current_working_copy, "working_copy"),
  separate(
    " ",
    label(
      separate(
        " ",
        if(divergent, "divergent"),
        if(hidden, "hidden"),
      ),
      separate(
        " ",
        format_short_change_id(change_id) ++ if(divergent, "?"),
        format_short_commit_id(commit_id),
        if(hidden, "hidden"),
      ),
    ),
    if(
      root,
      separate(
        " ",
        branches,
        tags,
        working_copies,
        git_head,
      ),
      separate(
        " ",
        if(
          committer.timestamp().ago().remove_suffix(" ago").remove_suffix("s").ends_with("second"),
          committer.timestamp().ago().remove_suffix(" ago").remove_suffix("s").remove_suffix(" second") ++ label("timestamp", "s"),
        if(
          committer.timestamp().ago().remove_suffix(" ago").remove_suffix("s").ends_with("minute"),
          committer.timestamp().ago().remove_suffix(" ago").remove_suffix("s").remove_suffix(" minute") ++ label("timestamp", "m"),
        if(
          committer.timestamp().ago().remove_suffix(" ago").remove_suffix("s").ends_with("hour"),
          committer.timestamp().ago().remove_suffix(" ago").remove_suffix("s").remove_suffix(" hour") ++ label("timestamp", "h"),
        if(
          committer.timestamp().ago().remove_suffix(" ago").remove_suffix("s").ends_with("day"),
          committer.timestamp().ago().remove_suffix(" ago").remove_suffix("s").remove_suffix(" day") ++ label("timestamp", "d"),
        if(
          committer.timestamp().ago().remove_suffix(" ago").remove_suffix("s").ends_with("week"),
          committer.timestamp().ago().remove_suffix(" ago").remove_suffix("s").remove_suffix(" week") ++ label("timestamp", "wk"),
        if(
          committer.timestamp().ago().remove_suffix(" ago").remove_suffix("s").ends_with("month"),
          committer.timestamp().ago().remove_suffix(" ago").remove_suffix("s").remove_suffix(" month") ++ label("timestamp", "mo"),
        if(
          committer.timestamp().ago().remove_suffix(" ago").remove_suffix("s").ends_with("year"),
          committer.timestamp().ago().remove_suffix(" ago").remove_suffix("s").remove_suffix(" year") ++ label("timestamp", "yr"),
        committer.timestamp().ago().remove_suffix(" ago"),
        ))))))),
        if(empty, label("empty", "(empty)")),
        if(conflict, label("conflict", "(conflict)")),
        if(description, description.first_line(), description_placeholder),
        branches,
        tags,
        working_copies,
        git_head,
      ),
    ),
  ),
)
'''
