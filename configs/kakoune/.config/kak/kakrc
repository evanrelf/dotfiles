################################################################################
# INDENTATION
################################################################################

# Use spaces for indentation
hook global InsertChar \t %{ try %{
  # Assert cursor is at beginning of line
  execute-keys -draft "hGh<a-k>\A\h+\z<ret>"
  # Replace tab character with spaces
  # TODO: Don't replace tab character if `indentwidth` is 0
  execute-keys -draft "h%opt{indentwidth}@"
} catch %{
  # Delete tab character when cursor is not at beginning of line
  execute-keys -draft "hd"
}}

# De-indent when deleting a line's leading whitespace
hook global InsertDelete " " %{ try %{
  # Assert cursor is at beginning of line
  execute-keys -draft "hGh<a-k>\A\h+\z<ret>"
  # De-indent line
  execute-keys -draft "i<space><esc><lt>"
}}

# TODO: Implement Vim's `shiftround` behavior

# Indent with 2 spaces by default
set-option global indentwidth 2

# Indent with 4 spaces in select languages
hook global WinSetOption filetype=(fish|python|rust) %{
  set-option window indentwidth 4
}

# Indent with tabs in select languages
hook global WinSetOption filetype=(go|makefile) %{
  set-option window indentwidth 0
}

################################################################################
# FORMATTING
################################################################################

hook global WinSetOption filetype=fish %{
  set-option window formatcmd "fish_indent"
  hook window BufWritePre .* %{ format-buffer }
}

hook global WinSetOption filetype=go %{
  set-option window formatcmd "gofmt"
  hook window BufWritePre .* %{ format-buffer }
}

hook global WinSetOption filetype=haskell %{
  try %{
    evaluate-commands %sh{ test -n "$be" || echo "fail" }
    set-option window formatcmd "be format haskell --stdin"
    hook window BufWritePre .* %{ format-buffer }
  }
}

hook global WinSetOption filetype=nix %{
  try %{
    evaluate-commands %sh{ test -n "$be" || echo "fail" }
    set-option window formatcmd "be format nix --stdin"
    hook window BufWritePre .* %{ format-buffer }
  } catch %{
    set-option window formatcmd "nixpkgs-fmt"
  }
}

hook global WinSetOption filetype=python %{
  set-option window formatcmd "ruff format --stdin-filename %val{buffile}"
  hook window BufWritePre .* %{ format-buffer }
}

hook global WinSetOption filetype=rust %{
  add-highlighter shared/rust/shebang region '^#!' $ fill meta
  set-option window formatcmd "rustfmt --edition 2024"
  hook window BufWritePre .* %{ format-buffer }
}

################################################################################
# LINTING
################################################################################

hook global WinSetOption filetype=python %{
  set-option window lintcmd "ruff check --preview --output-format concise"
  hook window BufWritePost .* %{ lint-buffer }
}

hook global WinSetOption filetype=sh %{
  set-option window lintcmd "shellcheck --format gcc"
  hook window BufWritePost .* %{ lint-buffer }
}

################################################################################
# COMPLETION
################################################################################

# Use Tab in autocomplete menu
hook global InsertCompletionShow .* %{ try %{
  # Assert previous character is not a space
  execute-keys -draft "h<a-K>\h<ret>"
  # Bind tab keys to control completion menu
  map window "insert" "<tab>" "<c-n>"
  map window "insert" "<s-tab>" "<c-p>"
  # Restore tab keys outside of completion menu
  hook -once window InsertCompletionHide .* %{
    unmap window "insert" "<tab>" "<c-n>"
    unmap window "insert" "<s-tab>" "<c-p>"
  }
}}

# Disable legacy mappings
map global "insert" "<c-n>" "<a-;>: fail 'Use tab'<ret>"
map global "insert" "<c-p>" "<a-;>: fail 'Use s-tab'<ret>"

hook global WinSetOption filetype=python %{
  set-option window static_words ""
}

################################################################################
# LSP
################################################################################

provide-module lsp-init %{
  evaluate-commands %sh{ kak-lsp --kakoune -s "$kak_session" }
  set-option global lsp_completion_trigger "fail"
  map global "normal" "=" ": lsp-hover<ret>"
  # Dim non-code text
  set-face global InfoDefault comment
  set-face global InfoBlock Information
  set-face global InfoBlockQuote comment
  set-face global InfoBullet comment
  set-face global InfoHeader comment
  set-face global InfoLink comment
  set-face global InfoLinkMono comment
  set-face global InfoMono Information
  set-face global InfoRule comment
  set-face global InfoDiagnosticError comment
  set-face global InfoDiagnosticHint comment
  set-face global InfoDiagnosticInformation comment
  set-face global InfoDiagnosticWarning comment
}

hook global WinSetOption filetype=haskell %{
  require-module lsp-init
  lsp-enable-window
}

hook global WinSetOption filetype=rust %{
  require-module lsp-init
}

map global "user" "l" ": enter-user-mode lsp<ret>" -docstring "LSP mode"
map global "object" "d" "<a-;> lsp-diagnostic-object --include-warnings<ret>" -docstring "LSP errors and warnings"
map global "object" "D" "<a-;> lsp-diagnostic-object<ret>" -docstring "LSP errors"

################################################################################
# TRAILING WHITESPACE
################################################################################

# Highlight trailing whitespace
hook global WinCreate .* %{
  add-highlighter window/trailing-whitespace regex \h+$ 0:red+r
}

hook global ModeChange pop:insert:.* %{ try %{
  add-highlighter window/trailing-whitespace regex \h+$ 0:red+r
}}

hook global ModeChange push:.*:insert %{
  remove-highlighter window/trailing-whitespace
}

# Strip trailing whitespace
define-command -docstring "strip: strip trailing whitespace" \
strip %{
  execute-keys -draft '%s\h+$<ret>d'
}

################################################################################
# NUMBERS
################################################################################

hook -always global WinCreate .* %{
  add-highlighter window/number-lines number-lines -hlcursor
}

################################################################################
# GIT DIFF
################################################################################

set-option global git_diff_add_char "▎"
set-option global git_diff_mod_char "▎"
set-option global git_diff_del_char "▁"
set-option global git_diff_top_char "▔"

hook global WinCreate .* %{
  hook -once window NormalIdle .* %{ try %{
    git show-diff
    hook window BufWritePost .* %{ try %{
      git update-diff
    }}
  }}
}

################################################################################
# COLUMN
################################################################################

# By default, the ideal width is 80 columns
set-option global autowrap_column 80

hook global WinSetOption filetype=rust %{
  set-option window autowrap_column 100
}

hook global WinSetOption filetype=git-commit %{
  add-highlighter window/subject-column column 50 "default,%opt{column_color}"
  set-option window autowrap_column 72
  autowrap-enable
}

hook global WinSetOption filetype=jj-description %{
  add-highlighter window/subject-column column 50 "default,%opt{column_color}"
  set-option window autowrap_column 72
  autowrap-enable
}

hook global WinSetOption autowrap_column=.* %{
  add-highlighter -override window/autowrap-column column %sh{ echo $((kak_opt_autowrap_column + 1)) } "default,%opt{column_color}"
}

define-command -docstring "softwrap-enable: enable soft wrapping" \
softwrap-enable %{
  add-highlighter window/softwrap wrap -indent -width %opt{autowrap_column}
}

define-command -docstring "softwrap-disable: disable soft wrapping" \
softwrap-disable %{
  remove-highlighter window/softwrap
}

################################################################################
# HASKELL
################################################################################

define-command -hidden haskell-insert-language-extension %{
  # Cache language extensions
  nop %sh{
    file="${HOME}/.cache/kak/ghc-language-extensions"
    mkdir -p "${HOME}/.cache/kak"
    if command -v ghc >/dev/null 2>&1 && [ ! -f "${file}" ]; then
      ghc --supported-extensions > "${file}"
    fi
  }
  prompt -shell-script-candidates "cat $HOME/.cache/kak/ghc-language-extensions | grep --invert-match --extended-regexp '(GeneralisedNewtypeDeriving|Rank2Types|AutoDeriveTypeable|TypeInType|NullaryTypeClasses)'" "extension: " %{
    evaluate-commands %sh{
      case "$kak_opt_filetype" in
        "haskell")
          echo 'execute-keys -draft "i{-# LANGUAGE %val{text} #-}<esc>"'
          ;;
        *)
          echo 'execute-keys -draft "i%val{text}<esc>"'
          ;;
      esac
    }
    execute-keys "<esc>"
  }
}

define-command -hidden haskell-insert-option %{
  # Cache options
  nop %sh{
    file="${HOME}/.cache/kak/ghc-options"
    mkdir -p "${HOME}/.cache/kak"
    if command -v ghc >/dev/null 2>&1 && [ ! -f "${file}" ]; then
      ghc --show-options > "${file}"
    fi
  }
  prompt -shell-script-candidates "cat $HOME/.cache/kak/ghc-options | grep --invert-match --extended-regexp '(^-X|-Wwarn=|-Werror=|-Wno-error=)'" "option: " %{
    evaluate-commands %sh{
      case "$kak_opt_filetype" in
        "haskell")
          echo 'execute-keys -draft "i{-# OPTIONS_GHC %val{text} #-}<esc>"'
          ;;
        *)
          echo 'execute-keys -draft "i%val{text}<esc>"'
          ;;
      esac
    }
    execute-keys "<esc>"
  }
}

# TODO: Infer actual SQLite DB path

define-command -hidden haskell-goto-definition %{
  try %{
    lsp-definition
  } catch %{ evaluate-commands %sh{
    db=".hiedb"
    input_module=$(rg --only-matching '^\bmodule\b\s+([A-Za-z0-9_\.]+)' --replace '$1' --max-count 1 "$kak_buffile")
    input_position=$(echo "$kak_selection_desc" | tr '.,' ' ')
    output=$(hiedb -D "$db" point-defs "$input_module" $input_position 2>/dev/null)
    output_module=$(echo "$output" | cut -d ':' -f 1)
    output_position=$(echo "$output" | cut -d ':' -f 2- | cut -d '-' -f 1 | tr ':' ' ')
    output_file=$(sqlite3 "$db" "select hs_src from mods where mod = '$output_module'")
    if [ -n "$output_file" ]; then
      echo "edit -existing %{$output_file} $output_position"
    else
      echo "select-word-if-reduced"
      echo "ctags-search"
    fi
  }}
}

hook global BufCreate .*\.(persistentmodels|yesodroutes) %{
  set-option buffer filetype haskell
}

hook global WinDisplay .*/MercuryTechnologies/\w+/(?<module>[A-Z]\w+(?:\.[A-Z]\w+)*) %{
  evaluate-commands %sh{
    file=$(echo "$kak_hook_param_capture_module" | tr '.' '/')
    echo "try %{ edit -existing src/$file.hs } catch %{ edit -existing test/$file.hs } catch %{}"
  }
}

################################################################################
# MAPPINGS
################################################################################

define-command -hidden select-word-if-reduced %{ evaluate-commands %sh{
  if [ "$kak_selections_length" = "1" ]; then
    echo 'try %{ execute-keys "<a-i>w" }'
  fi
}}

# Toggle comments
map global "normal" "#" ": comment-line<ret>"
map global "normal" "<a-#>" ": comment-block<ret>"

# Discard selection upon entering insert mode (diet evanrelf/reselect.kak)
map global "normal" "i" ";i"
map global "normal" "a" ";li"

# Make search case-insensitive by default
map global "normal" "/" "/(?i)"
map global "normal" "?" "?(?i)"
map global "normal" "<a-/>" "<a-/>(?i)"
map global "normal" "<a-?>" "<a-?>(?i)"

# Center viewport after jumping
map global "normal" "n" "nvc"
map global "normal" "N" "Nvc"
map global "normal" "<a-n>" "<a-n>vc"
map global "normal" "<a-N>" "<a-N>vc"
map global "normal" "<c-i>" "<c-i>vc"
map global "normal" "<c-o>" "<c-o>vc"
map global "view" "v" "<esc>: fail 'Use vc'<ret>" -docstring "-"

# Make `*` search for word under cursor when selection is reduced (like Vim)
map global "normal" "*" ": select-word-if-reduced<ret>: execute-keys -save-regs '' '*'<ret>"

# Don't use `/` register for split and keep
map global "normal" "s" '"ss'
map global "normal" "S" '"sS'
map global "normal" "<a-k>" '"k<a-k>'
map global "normal" "<a-K>" '"k<a-K>'

# Use `q` for backwards word movement
map global "normal" "q" "b"
map global "normal" "Q" "B"
map global "normal" "<a-q>" "<a-b>"
map global "normal" "<a-Q>" "<a-B>"
map global "normal" "b" "q"
map global "normal" "B" "Q"
map global "normal" "<a-b>" ": fail 'Use a-q'<ret>"
map global "normal" "<a-B>" ": fail 'Use a-Q'<ret>"

# Goto mode
map global "goto" "H" "<esc>Gh" -docstring "line begin (extend)"
map global "goto" "L" "<esc>Gl" -docstring "line end (extend)"
map global "goto" "K" "<esc>Gk" -docstring "buffer top (extend)"
map global "goto" "J" "<esc>Gj" -docstring "buffer bottom (extend)"
map global "goto" "I" "<esc>Gi" -docstring "line non blank start (extend)"
map global "goto" "E" "<esc>Ge" -docstring "buffer end (extend)"
map global "goto" "T" "<esc>Gt" -docstring "window top (extend)"
map global "goto" "C" "<esc>Gc" -docstring "window center (extend)"
map global "goto" "B" "<esc>Gb" -docstring "window bottom (extend)"
map global "normal" "G" ": fail 'Use g'<ret>"
map global "normal" "<a-h>" ": fail 'Use gH'<ret>"
map global "normal" "<a-l>" ": fail 'Use gL'<ret>"
map global "normal" "<a-H>" ": fail 'Use gH'<ret>"
map global "normal" "<a-L>" ": fail 'Use gL'<ret>"
map global "goto" "g" "<esc>: fail 'Use gk'<ret>" -docstring "-"

evaluate-commands %sh{
  if [ -z "$kak_opt_lsp_cmd" ]; then
    echo "map global 'goto' 'd' '<esc>: select-word-if-reduced<ret>: ctags-search<ret>' -docstring 'definition'"
  fi
}

# Surround mode
declare-user-mode "surround"
map global "normal" "'" ": enter-user-mode surround<ret>" -docstring "surround..."
map global "surround" "("    %{_| sd --flags s '(.*)' '($1)'        <ret>} -docstring " (surround) "
map global "surround" "["    %{_| sd --flags s '(.*)' '[$1]'        <ret>} -docstring " [surround] "
map global "surround" "{"    %{_| sd --flags s '(.*)' '{$1}'        <ret>} -docstring " {surround} "
map global "surround" "<lt>" %{_| sd --flags s '(.*)' '<lt>$1<gt>'  <ret>} -docstring " <surround> "
map global "surround" "|"    %{_| sd --flags s '(.*)' '|$1|'      <ret>} -docstring "| surround |"
map global "surround" ")"    %{_| sd --flags s '(.*)' '( $1 )'      <ret>} -docstring "( surround )"
map global "surround" "]"    %{_| sd --flags s '(.*)' '[ $1 ]'      <ret>} -docstring "[ surround ]"
map global "surround" "}"    %{_| sd --flags s '(.*)' '{ $1 }'      <ret>} -docstring "{ surround }"
map global "surround" "<gt>" %{_| sd --flags s '(.*)' '<lt> $1 <gt>'<ret>} -docstring "< surround >"
map global "surround" "'"    %{_| sd --flags s '(.*)' "'\$1'"       <ret>} -docstring " 'surround' "
map global "surround" '"'    %{_| sd --flags s '(.*)' '"$1"'        <ret>} -docstring ' "surround" '
map global "surround" "`"    %{_| sd --flags s '(.*)' '`$1`'        <ret>} -docstring " `surround` "
map global "surround" "_"    %{_| sd --flags s '(.*)' '_${1}_'      <ret>} -docstring " _surround_ "
map global "surround" "*"    %{_| sd --flags s '(.*)' '*$1*'        <ret>} -docstring " *surround* "

# User mode
define-command -hidden clipboard-yank %{ execute-keys "<a-|>pbcopy<ret>" }
define-command -hidden clipboard-paste-after %{ execute-keys "<a-!>pbpaste<ret>" }
define-command -hidden clipboard-paste-before %{ execute-keys "!pbpaste<ret>" }
define-command -hidden clipboard-replace %{ execute-keys "|pbpaste<ret>" }
map global "user" "y" ": clipboard-yank<ret>" -docstring "yank"
map global "user" "p" ": clipboard-paste-after<ret>" -docstring "paste after"
map global "user" "P" ": clipboard-paste-before<ret>" -docstring "paste before"
map global "user" "R" ": clipboard-replace<ret>" -docstring "replace"
map global "user" "i" ': execute-keys %val{count}o<lt>backspace><ret>' -docstring "insert with count"
map global "user" "_" "| pancase snake<ret>" -docstring "snake_case"
map global "user" "<minus>" "| pancase kebab<ret>" -docstring "kebab-case"
map global "user" "`" "| pancase camel<ret>" -docstring "camelCase"
map global "user" "~" "| pancase pascal<ret>" -docstring "PascalCase"

# Haskell mode
declare-user-mode "haskell"
map global "user" "h" ": enter-user-mode haskell<ret>" -docstring "haskell..."
map global "haskell" "l" ": haskell-insert-language-extension<ret>" -docstring "insert language extension"
map global "haskell" "o" ": haskell-insert-option<ret>" -docstring "insert option"
hook global WinSetOption filetype=haskell %{
  map global "goto" "d" "<esc>: haskell-goto-definition<ret>" -docstring "definition"
}

################################################################################
# MISCELLANEOUS
################################################################################

# evanrelf/byline.kak
require-module "byline"

# Don't show changelog on startup
set-option global startup_info_version 99991231

# Highlight search matches
add-highlighter global/search-matches dynregex '%reg{/}' 0:black,white+f

# Highlight matching pairs
add-highlighter global/show-matching show-matching

# Rename `delete-buffer` to `buffer-delete`
alias global "buffer-delete" "delete-buffer"
alias global "buffer-delete!" "delete-buffer!"
alias global "bd" "delete-buffer"
alias global "bd!" "delete-buffer!"

################################################################################
# JJ
################################################################################

hook global BufCreate .*\.jjdescription %{
  set-option buffer filetype jj-description
}

hook global WinSetOption filetype=jj-description %{
  require-module jj-description
}

hook -group jj-description-highlight global WinSetOption filetype=jj-description %{
  add-highlighter window/jj-description ref jj-description
  hook -once -always window WinSetOption filetype=.* %{ remove-highlighter window/jj-description }
}

provide-module jj-description %{

add-highlighter shared/jj-description regions
add-highlighter shared/jj-description/code default-region group
add-highlighter shared/jj-description/comment region '^JJ:' '$' fill comment

}
