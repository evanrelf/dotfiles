################################################################################
# INDENTATION
################################################################################

# Use spaces for indentation
hook global InsertChar \t %{ try %{
  # Assert cursor is at beginning of line
  execute-keys -draft "hGh<a-k>\A\h+\z<ret>"
  # Replace tab character with spaces
  # TODO: Don't replace tab character if `indentwidth` is 0
  execute-keys -draft "h%opt{indentwidth}@"
} catch %{
  # Delete tab character when cursor is not at beginning of line
  execute-keys -draft "hd"
}}

# De-indent when deleting a line's leading whitespace
hook global InsertDelete " " %{ try %{
  # Assert cursor is at beginning of line
  execute-keys -draft "hGh<a-k>\A\h+\z<ret>"
  # De-indent line
  execute-keys -draft "i<space><esc><lt>"
}}

# TODO: Implement Vim's `shiftround` behavior

# Indent with 2 spaces by default
set-option global indentwidth 2

# Indent with 4 spaces in select languages
hook global WinSetOption filetype=(fish|python|roc|rust|zig) %{
  set-option window indentwidth 4
}

# Indent with tabs in select languages
hook global WinSetOption filetype=(go|makefile) %{
  set-option window indentwidth 0
}

################################################################################
# FORMATTING
################################################################################

hook global WinSetOption filetype=clojure %sh{
  echo 'set-option window formatcmd %{zprint "{:search-config? true}"}'
  if [ "$(uname)" != "Darwin"] || [ "$(command -v zprint)" != "/usr/bin/zprint" ]; then
    echo 'hook window BufWritePre .* %{ format-buffer }'
  fi
}

hook global WinSetOption filetype=dhall %{
  set-option window formatcmd "dhall format"
}

hook global WinSetOption filetype=fish %{
  set-option window formatcmd "fish_indent"
  hook window BufWritePre .* %{ format-buffer }
}

hook global WinSetOption filetype=go %{
  set-option window formatcmd "gofmt"
  hook window BufWritePre .* %{ format-buffer }
}

hook global WinSetOption filetype=nix %{
  set-option window formatcmd "nixpkgs-fmt"
}

hook global WinSetOption filetype=python %{
  set-option window formatcmd "ruff format --stdin-filename %val{buffile}"
  hook window BufWritePre .* %{ format-buffer }
}

hook global WinSetOption filetype=roc %{
  set-option window formatcmd "roc format --stdin --stdout"
  hook window BufWritePre .* %{ format-buffer }
}

hook global WinSetOption filetype=rust %{
  add-highlighter shared/rust/shebang region '^#!' $ fill meta
  set-option window formatcmd "rustfmt --edition 2021 --emit stdout"
  hook window BufWritePre .* %{ format-buffer }
}

################################################################################
# LINTING
################################################################################

hook global WinSetOption filetype=python %{
  set-option window lintcmd "ruff check --preview --output-format concise"
  hook window BufWritePost .* %{ lint-buffer }
}

hook global WinSetOption filetype=sh %{
  set-option window lintcmd "shellcheck --external-sources --check-sourced --format gcc"
  hook window BufWritePost .* %{ lint-buffer }
}

################################################################################
# COMPLETION
################################################################################

# Use Tab in autocomplete menu
hook global InsertCompletionShow .* %{ try %{
  # Assert previous character is not a space
  execute-keys -draft "h<a-K>\h<ret>"
  # Bind tab keys to control completion menu
  map window "insert" "<tab>" "<c-n>"
  map window "insert" "<s-tab>" "<c-p>"
  # Restore tab keys outside of completion menu
  hook -once window InsertCompletionHide .* %{
    unmap window "insert" "<tab>" "<c-n>"
    unmap window "insert" "<s-tab>" "<c-p>"
  }
}}

# Disable legacy mappings
map global "insert" "<c-n>" "<a-;>: fail 'Use tab'<ret>"
map global "insert" "<c-p>" "<a-;>: fail 'Use s-tab'<ret>"

hook global WinSetOption filetype=python %{
  set-option window static_words ""
}

################################################################################
# LSP
################################################################################

provide-module lsp-init %{
  evaluate-commands %sh{ kak-lsp --kakoune -s "$kak_session" }
  set-option global lsp_completion_trigger "fail"
  map global "normal" "=" ": lsp-hover<ret>"
  # Dim non-code text
  set-face global InfoDefault comment
  set-face global InfoBlock Information
  set-face global InfoBlockQuote comment
  set-face global InfoBullet comment
  set-face global InfoHeader comment
  set-face global InfoLink comment
  set-face global InfoLinkMono comment
  set-face global InfoMono Information
  set-face global InfoRule comment
  set-face global InfoDiagnosticError comment
  set-face global InfoDiagnosticHint comment
  set-face global InfoDiagnosticInformation comment
  set-face global InfoDiagnosticWarning comment
}

hook global WinSetOption filetype=haskell %{
  require-module lsp-init
  lsp-enable-window
}

hook global WinSetOption filetype=(roc|rust) %{
  require-module lsp-init
}

map global "user" "l" ": enter-user-mode lsp<ret>" -docstring "LSP mode"
map global "object" "d" "<a-;> lsp-diagnostic-object --include-warnings<ret>" -docstring "LSP errors and warnings"
map global "object" "D" "<a-;> lsp-diagnostic-object<ret>" -docstring "LSP errors"

################################################################################
# CLIPBOARD
################################################################################

declare-option -hidden str clipboard_copy "<esc>: fail 'No clipboard_copy set'<ret>"

declare-option -hidden str clipboard_paste "<esc>: fail 'No clipboard_paste set'<ret>"

hook -once global NormalIdle .* %{
  evaluate-commands %sh{
    case "$(uname)" in
      "Darwin")
        echo "set-option global clipboard_copy 'pbcopy'"
        echo "set-option global clipboard_paste 'pbpaste'"
        ;;
      "Linux")
        echo "set-option global clipboard_copy 'wl-copy || xclip || tmux load-buffer -'"
        echo "set-option global clipboard_paste 'wl-paste || xclip -o || tmux save-buffer -'"
        ;;
    esac
  }
}

define-command -hidden clipboard-yank %{
  execute-keys "<a-|>%opt{clipboard_copy}<ret>"
}

define-command -hidden clipboard-paste-after %{
  execute-keys "<a-!>%opt{clipboard_paste}<ret>"
}

define-command -hidden clipboard-paste-before %{
  execute-keys "!%opt{clipboard_paste}<ret>"
}

define-command -hidden clipboard-replace %{
  execute-keys "|%opt{clipboard_paste}<ret>"
}

################################################################################
# TRAILING WHITESPACE
################################################################################

# Highlight trailing whitespace
hook global WinCreate .* %{
  add-highlighter window/trailing-whitespace regex \h+$ 0:red+r
}

hook global ModeChange pop:insert:.* %{ try %{
  add-highlighter window/trailing-whitespace regex \h+$ 0:red+r
}}

hook global ModeChange push:.*:insert %{
  remove-highlighter window/trailing-whitespace
}

# Strip trailing whitespace
define-command -docstring "strip: strip trailing whitespace" \
strip %{
  execute-keys -draft '%s\h+$<ret>d'
}

################################################################################
# NUMBERS
################################################################################

hook -always global WinCreate .* %{
  add-highlighter window/number-lines number-lines -hlcursor
}

################################################################################
# GIT DIFF
################################################################################

set-option global git_diff_add_char "▎"
set-option global git_diff_mod_char "▎"
set-option global git_diff_del_char "▁"
set-option global git_diff_top_char "▔"

hook global WinCreate .* %{
  hook -once window NormalIdle .* %{ try %{
    git show-diff
    hook window BufWritePost .* %{ try %{
      git update-diff
    }}
  }}
}

################################################################################
# COLUMN
################################################################################

hook -once global KakBegin .* %{
  # evanrelf/primer.kak
  declare-option str column_color "rgb:f6f8fa"

  # evanrelf/coconut.kak
  # declare-option str column_color "rgb:F7F5F2"
}

# By default, the ideal width is 80 columns
set-option global autowrap_column 80

hook global WinSetOption filetype=rust %{
  set-option window autowrap_column 100
}

hook global WinSetOption filetype=git-commit %{
  add-highlighter window/subject-column column 50 "default,%opt{column_color}"
  set-option window autowrap_column 72
  autowrap-enable
}

hook global WinSetOption filetype=jjdescription %{
  add-highlighter window/subject-column column 50 "default,%opt{column_color}"
  set-option window autowrap_column 72
  autowrap-enable
}

hook global WinSetOption autowrap_column=.* %{
  add-highlighter -override window/autowrap-column column %sh{ echo $((kak_opt_autowrap_column + 1)) } "default,%opt{column_color}"
}

define-command -docstring "softwrap-enable: enable soft wrapping" \
softwrap-enable %{
  add-highlighter window/softwrap wrap -indent -width %opt{autowrap_column}
}

define-command -docstring "softwrap-disable: disable soft wrapping" \
softwrap-disable %{
  remove-highlighter window/softwrap
}

################################################################################
# HASKELL
################################################################################

define-command -hidden haskell-cache-language-extensions %{ nop %sh{
  file="${HOME}/.cache/kak/ghc-language-extensions"
  mkdir -p "${HOME}/.cache/kak"
  if command -v ghc >/dev/null 2>&1 && [ ! -f "${file}" ]; then
    ghc --supported-extensions > "${file}"
  fi
}}

define-command -hidden haskell-cache-options %{ nop %sh{
  file="${HOME}/.cache/kak/ghc-options"
  mkdir -p "${HOME}/.cache/kak"
  if command -v ghc >/dev/null 2>&1 && [ ! -f "${file}" ]; then
    ghc --show-options > "${file}"
  fi
}}

define-command -hidden haskell-insert-language-extension %{
  haskell-cache-language-extensions
  prompt -shell-script-candidates "cat $HOME/.cache/kak/ghc-language-extensions | grep --invert-match --extended-regexp '(GeneralisedNewtypeDeriving|Rank2Types|AutoDeriveTypeable|TypeInType|NullaryTypeClasses)'" "extension: " %{
    evaluate-commands %sh{
      case "$kak_opt_filetype" in
        "haskell")
          echo 'execute-keys -draft "i{-# LANGUAGE %val{text} #-}<esc>"'
          ;;
        *)
          echo 'execute-keys -draft "i%val{text}<esc>"'
          ;;
      esac
    }
    execute-keys "<esc>"
  }
}

define-command -hidden haskell-insert-option %{
  haskell-cache-options
  prompt -shell-script-candidates "cat $HOME/.cache/kak/ghc-options | grep --invert-match --extended-regexp '(^-X|-Wwarn=|-Werror=|-Wno-error=)'" "option: " %{
    evaluate-commands %sh{
      case "$kak_opt_filetype" in
        "haskell")
          echo 'execute-keys -draft "i{-# OPTIONS_GHC %val{text} #-}<esc>"'
          ;;
        *)
          echo 'execute-keys -draft "i%val{text}<esc>"'
          ;;
      esac
    }
    execute-keys "<esc>"
  }
}

# TODO: Infer actual SQLite DB path

define-command -hidden haskell-goto-definition %{
  try %{
    lsp-definition
  } catch %{ evaluate-commands %sh{
    db=".hiedb"
    input_module=$(rg --only-matching '^\bmodule\b\s+([A-Za-z0-9_\.]+)' --replace '$1' --max-count 1 "$kak_buffile")
    input_position=$(echo "$kak_selection_desc" | tr '.,' ' ')
    output=$(hiedb -D "$db" point-defs "$input_module" $input_position 2>/dev/null)
    output_module=$(echo "$output" | cut -d ':' -f 1)
    output_position=$(echo "$output" | cut -d ':' -f 2- | cut -d '-' -f 1 | tr ':' ' ')
    output_file=$(sqlite3 "$db" "select hs_src from mods where mod = '$output_module'")
    if [ -n "$output_file" ]; then
      echo "edit -existing %{$output_file} $output_position"
    else
      # echo "echo -debug 'haskell-goto-definition: input_module=\"$input_module\"'"
      # echo "echo -debug 'haskell-goto-definition: input_position=\"$input_position\"'"
      # echo "echo -debug 'haskell-goto-definition: output_module=\"$output_module\"'"
      # echo "echo -debug 'haskell-goto-definition: output_position=\"$output_position\"'"
      # echo "echo -debug 'haskell-goto-definition: output_file=\"$output_file\"'"
      echo "select-word-if-reduced"
      echo "ctags-search"
    fi
  }}
}

define-command -hidden haskell-type-at-point %{
  try %{
    lsp-hover
  } catch %{ evaluate-commands %sh{
    db=".hiedb"
    module=$(rg --only-matching '\bmodule\b\s+([A-Za-z0-9_\.]+)' --replace '$1' --max-count 1 "$kak_buffile")
    hiedb_position=$(echo "$kak_selection_desc" | tr '.,' ' ')
    output=$(hiedb -D "$db" point-types "$module" $hiedb_position 2>/dev/null | sd '\n(.)' ' $1' | sd 'forall' '\n\nforall' | fmt -w80)
    info_position=$(echo "$kak_selection_desc" | cut -d ',' -f 1)
    echo "info -anchor $info_position %{$output}"
  }}
}

################################################################################
# MAPPINGS
################################################################################

define-command -hidden select-word-if-reduced %{ evaluate-commands %sh{
  if [ "$kak_selections_length" = "1" ]; then
    echo 'try %{ execute-keys "<a-i>w" }'
  fi
}}

# Toggle comments
map global "normal" "#" ": comment-line<ret>"
map global "normal" "<a-#>" ": comment-block<ret>"

# Discard selection upon entering insert mode (diet evanrelf/reselect.kak)
map global "normal" "i" ";i"
map global "normal" "a" ";li"

# Make search case-insensitive by default
map global "normal" "/" "/(?i)"
map global "normal" "?" "?(?i)"
map global "normal" "<a-/>" "<a-/>(?i)"
map global "normal" "<a-?>" "<a-?>(?i)"

# Center viewport after jumping
map global "normal" "n" "nvc"
map global "normal" "N" "Nvc"
map global "normal" "<a-n>" "<a-n>vc"
map global "normal" "<a-N>" "<a-N>vc"
map global "normal" "<c-i>" "<c-i>vc"
map global "normal" "<c-o>" "<c-o>vc"
map global "view" "v" "<esc>: fail 'Use vc'<ret>" -docstring "-"

# Make `*` search for word under cursor when selection is reduced (like Vim)
map global "normal" "*" ": select-word-if-reduced<ret>: execute-keys -save-regs '' '*'<ret>"

# Don't use `/` register for split and keep
map global "normal" "s" '"ss'
map global "normal" "S" '"sS'
map global "normal" "<a-k>" '"k<a-k>'
map global "normal" "<a-K>" '"k<a-K>'

# Use `q` for backwards word movement
map global "normal" "q" "b"
map global "normal" "Q" "B"
map global "normal" "<a-q>" "<a-b>"
map global "normal" "<a-Q>" "<a-B>"
map global "normal" "b" "q"
map global "normal" "B" "Q"
map global "normal" "<a-b>" ": fail 'Use a-q'<ret>"
map global "normal" "<a-B>" ": fail 'Use a-Q'<ret>"

# Goto mode
map global "goto" "H" "<esc>Gh" -docstring "line begin (extend)"
map global "goto" "L" "<esc>Gl" -docstring "line end (extend)"
map global "goto" "K" "<esc>Gk" -docstring "buffer top (extend)"
map global "goto" "J" "<esc>Gj" -docstring "buffer bottom (extend)"
map global "goto" "I" "<esc>Gi" -docstring "line non blank start (extend)"
map global "goto" "E" "<esc>Ge" -docstring "buffer end (extend)"
map global "goto" "T" "<esc>Gt" -docstring "window top (extend)"
map global "goto" "C" "<esc>Gc" -docstring "window center (extend)"
map global "goto" "B" "<esc>Gb" -docstring "window bottom (extend)"
map global "normal" "G" ": fail 'Use g'<ret>"
map global "normal" "<a-h>" ": fail 'Use gH'<ret>"
map global "normal" "<a-l>" ": fail 'Use gL'<ret>"
map global "normal" "<a-H>" ": fail 'Use gH'<ret>"
map global "normal" "<a-L>" ": fail 'Use gL'<ret>"
map global "goto" "g" "<esc>: fail 'Use gk'<ret>" -docstring "-"

evaluate-commands %sh{
  if [ -z "$kak_opt_lsp_cmd" ]; then
    echo "map global 'goto' 'd' '<esc>: select-word-if-reduced<ret>: ctags-search<ret>' -docstring 'definition'"
  fi
}

# Surround mode
declare-user-mode "surround"
map global "normal" "'" ": enter-user-mode surround<ret>" -docstring "surround..."
define-command -hidden surround-delete %{
  on-key -mode-name "surround-delete" %{ evaluate-commands %sh{
    case "$kak_key" in
      "(" | ")" | "[" | "]" | "{" | "}" | "<" | ">" | "<gt>" | "<lt>" | '"' | "'" | '`' )
        echo "execute-keys 'Z<a-a>${kak_key}<a-S><a-d>z'"
        ;;
      "<esc>")
        exit
        ;;
      *)
        echo "fail 'surround-delete: invalid key'"
        ;;
    esac
  }}
}
map global "surround" "d" ": surround-delete<ret>" -docstring "delete"
map global "surround" "D" "Z<a-S><a-d>z<a-:>H" -docstring "delete (dumb)"
map global "surround" "("    %{_| sd --flags s '(.*)' '($1)'        <ret>} -docstring " (surround) "
map global "surround" "["    %{_| sd --flags s '(.*)' '[$1]'        <ret>} -docstring " [surround] "
map global "surround" "{"    %{_| sd --flags s '(.*)' '{$1}'        <ret>} -docstring " {surround} "
map global "surround" "<lt>" %{_| sd --flags s '(.*)' '<lt>$1<gt>'  <ret>} -docstring " <surround> "
map global "surround" ")"    %{_| sd --flags s '(.*)' '( $1 )'      <ret>} -docstring "( surround )"
map global "surround" "]"    %{_| sd --flags s '(.*)' '[ $1 ]'      <ret>} -docstring "[ surround ]"
map global "surround" "}"    %{_| sd --flags s '(.*)' '{ $1 }'      <ret>} -docstring "{ surround }"
map global "surround" "<gt>" %{_| sd --flags s '(.*)' '<lt> $1 <gt>'<ret>} -docstring "< surround >"
map global "surround" "'"    %{_| sd --flags s '(.*)' "'\$1'"       <ret>} -docstring " 'surround' "
map global "surround" '"'    %{_| sd --flags s '(.*)' '"$1"'        <ret>} -docstring ' "surround" '
map global "surround" "`"    %{_| sd --flags s '(.*)' '`$1`'        <ret>} -docstring " `surround` "
map global "surround" "_"    %{_| sd --flags s '(.*)' '_${1}_'      <ret>} -docstring " _surround_ "
map global "surround" "*"    %{_| sd --flags s '(.*)' '*$1*'        <ret>} -docstring " *surround* "

# User mode
map global "user" "y" ": clipboard-yank<ret>" -docstring "yank"
map global "user" "p" ": clipboard-paste-after<ret>" -docstring "paste after"
map global "user" "P" ": clipboard-paste-before<ret>" -docstring "paste before"
map global "user" "R" ": clipboard-replace<ret>" -docstring "replace"
map global "user" "i" ': execute-keys %val{count}o<lt>backspace><ret>' -docstring "insert with count"

# Buffer mode
declare-user-mode "buffer"
map global "user" "b" ": enter-user-mode buffer<ret>" -docstring "buffer..."
map global "buffer" "n" ": buffer-next<ret>" -docstring "next buffer"
map global "buffer" "p" ": buffer-previous<ret>" -docstring "previous buffer"
map global "buffer" "d" ": delete-buffer<ret>" -docstring "delete buffer"
map global "buffer" "u" ": buffer *debug*<ret>" -docstring "go to debug buffer"
map global "buffer" "=" ": format-buffer<ret>" -docstring "format buffer"

# Haskell mode
declare-user-mode "haskell"
map global "user" "h" ": enter-user-mode haskell<ret>" -docstring "haskell..."
map global "haskell" "l" ": haskell-insert-language-extension<ret>" -docstring "insert language extension"
map global "haskell" "o" ": haskell-insert-option<ret>" -docstring "insert option"
map global "haskell" "t" "<esc>: haskell-type-at-point<ret>" -docstring "type at point"
hook global WinSetOption filetype=haskell %{
  map global "goto" "d" "<esc>: haskell-goto-definition<ret>" -docstring "definition"
}

################################################################################
# EVALUATE
################################################################################

define-command -docstring "evaluate-buffer: evaluate buffer commands as if entered by user" \
evaluate-buffer %{
  execute-keys -draft "%: <c-r>.<ret>"
}

define-command -docstring "evaluate-selection: evaluate selection commands as if entered by user" \
evaluate-selection %{
  execute-keys -itersel -draft ": <c-r>.<ret>"
}

################################################################################
# MISCELLANEOUS
################################################################################

# evanrelf/byline.kak
require-module "byline"

# Don't show changelog on startup
set-option global startup_info_version 99991231

# Highlight search matches
add-highlighter global/search-matches dynregex '%reg{/}' 0:black,bright-white+f

# Highlight matching pairs
add-highlighter global/show-matching show-matching

# Rename `delete-buffer` to `buffer-delete`
alias global "buffer-delete" "delete-buffer"
alias global "buffer-delete!" "delete-buffer!"
alias global "bd" "delete-buffer"
alias global "bd!" "delete-buffer!"

################################################################################
# PRQL.KAK
################################################################################

hook global BufCreate .*/?(?i)prql %{
  set-option buffer filetype prql
}

hook global WinSetOption filetype=prql %{
  require-module prql
  set-option window formatcmd "prqlc fmt"
  # At the time of writing, `prqlc fmt` strips comments
  # hook window BufWritePre .* %{ format-buffer }
}

hook -group prql-highlight global WinSetOption filetype=prql %{
  add-highlighter window/prql ref prql
  hook -once -always window WinSetOption filetype=.* %{ remove-highlighter window/prql }
}

provide-module prql %{

add-highlighter shared/prql regions
add-highlighter shared/prql/code default-region group
add-highlighter shared/prql/comment region '#' '$' fill comment
add-highlighter shared/prql/double-string region '"' (?<!\\)(\\\\)*" fill string
add-highlighter shared/prql/single_string region "'" (?<!\\)(\\\\)*' fill string
add-highlighter shared/prql/code/ regex (?<!\.)\b(?:prql|let|type|func|from|derive|select|filter|sort|join|take|group|aggregate|window)\b(?!\.) 0:keyword
add-highlighter shared/prql/code/ regex (?:[\{\}\(\)\[\],\|=]|->) 0:keyword
add-highlighter shared/prql/code/ regex (?<!\.)\b(?:true|false|null)\b(?!\.) 0:value
add-highlighter shared/prql/code/ regex (?:-?\b[0-9](?:[0-9_]*[0-9])?(?:\.[0-9](?:[0-9_]*[0-9])?)?(?:[0-9_]*e[+-]?[0-9]+)?)\b 0:value
add-highlighter shared/prql/code/ regex \b\d+(?:\.\d+)?\b 0:value

}

################################################################################
# KDL.KAK
################################################################################

hook global BufCreate .*/?(?i)kdl %{
  set-option buffer filetype kdl
}

hook global WinSetOption filetype=kdl %{
  require-module kdl
}

hook -group kdl-init global WinSetOption filetype=kdl %{
  add-highlighter window/kdl ref kdl
  hook window ModeChange pop:insert:.* -group kdl-trim-indent kdl-trim-indent
  hook window InsertChar .* -group kdl-indent kdl-indent-on-char
  hook window InsertChar \n -group kdl-indent kdl-indent-on-new-line
  hook -once -always window WinSetOption filetype=.* %{ remove-hooks window kdl-.+ }
  hook -once -always window WinSetOption filetype=.* %{ remove-highlighter window/kdl }
}

provide-module kdl %§

add-highlighter shared/kdl regions
add-highlighter shared/kdl/code default-region group
add-highlighter shared/kdl/single-line-comment region '//' '$' fill comment
add-highlighter shared/kdl/multi-line-comment region '/\*' '\*/' fill comment
add-highlighter shared/kdl/string region '"' (?<!\\)(\\\\)*" fill string
add-highlighter shared/kdl/raw-string-0 region r" (?<!\\)(\\\\)*" fill string
add-highlighter shared/kdl/raw-string-1 region r#" (?<!\\)(\\\\)*"# fill string
add-highlighter shared/kdl/raw-string-2 region r##" (?<!\\)(\\\\)*"## fill string
add-highlighter shared/kdl/code/ regex (?:-?\b[0-9](?:[0-9_]*[0-9])?(?:\.[0-9](?:[0-9_]*[0-9])?)?(?:[0-9_]*e[+-]?[0-9]+)?)\b 0:value
add-highlighter shared/kdl/code/ regex \b\d+(?:\.\d+)?\b 0:value
add-highlighter shared/kdl/code/ regex \b(?:true|false|null)\b 0:value

# Indentation stolen from https://github.com/mawww/kakoune/blob/master/rc/filetype/json.kak

define-command -hidden kdl-trim-indent %{
    try %{ execute-keys -draft -itersel x s \h+$ <ret> d }
}

define-command -hidden kdl-indent-on-char %<
  evaluate-commands -draft -itersel %<
    try %< execute-keys -draft <a-h> <a-k> ^\h+[\]}]$ <ret> m <a-S> 1<a-&> >
  >
>

define-command -hidden kdl-indent-on-new-line %<
  evaluate-commands -draft -itersel %<
    try %{ execute-keys -draft <semicolon> K <a-&> }
    try %{ execute-keys -draft k : kdl-trim-indent <ret> }
    try %< execute-keys -draft k x <a-k> [[{]\h*$ <ret> j <a-gt> >
    try %< execute-keys -draft x <a-k> ^\h*[}\]] <ret> gh / [}\]] <ret> m <a-S> 1<a-&> >
  >
>

§

################################################################################
# JJ
################################################################################

hook global BufCreate .*\.jjdescription %{
  set-option buffer filetype jjdescription
}

hook global WinSetOption filetype=jjdescription %{
  require-module jjdescription
}

hook -group jjdescription-highlight global WinSetOption filetype=jjdescription %{
  add-highlighter window/jjdescription ref jjdescription
  hook -once -always window WinSetOption filetype=.* %{ remove-highlighter window/jjdescription }
}

provide-module jjdescription %{

add-highlighter shared/jjdescription regions
add-highlighter shared/jjdescription/code default-region group
add-highlighter shared/jjdescription/comment region '^JJ:' '$' fill comment

}
