snippet lang
{-# LANGUAGE $0 #-}
endsnippet

snippet module
module ${1:Main}
  ( ${2:{}}
  ) where
endsnippet

snippet module'
module ${1:Main} where
endsnippet

snippet data
data ${1:Type} = ${2:$1}
endsnippet

snippet type
type ${1:Type} = ${2:()}
endsnippet

snippet newtype
newtype ${1:Type} = $1 ${2:()}
endsnippet

snippet class
class ${1:Class} where
  ${2:function} :: ${3:_}
endsnippet

snippet fn
${1:function} :: ${2:_}
$1 $3= ${4:undefined}
endsnippet

snippet case
case ${1:something} of
  ${2:Pattern} -> ${3:expression}
endsnippet

snippet main
main :: IO ()
main = ${0:undefined}
endsnippet
